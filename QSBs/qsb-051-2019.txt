

             ---===[ Qubes Security Bulletin #51 ]===---

                             2019-09-10


        Missing validation of backup-restore compression filter

Summary
=======

The Qubes backup format has a provision for allowing user-selected
compression algorithms. Unfortunately, the choice of compression filter
in a given backup is not sufficiently validated on restore, and
processing of a maliciously crafted backup can lead to arbitrary
command execution in Dom0.

This is a logic error which is possible to reliably exploit without
arising user suspicion. If you have ever restored a backup from
untrusted storage without a very strong backup passphrase, it would
be prudent to consider your machine fully compromised. If you trust
that your backup passphrases are very secure, you are probably fine.

You do not need to have actually extracted any VMs from a malicious
backup to be compromised - even simply using the standard Qubes tools
to verify a backup's integrity is enough to compromise your system.

Details
=======

The ability to use a user-specified "compression filter" (in practice:
argument to `tar -I`/`tar --use-compress-program`) was introduced in
[7]. Alternate compression programs are specified by the user via
`qvm-backup --compress-filter [...]`, and are stored in the backup
metadata. Originally they were stored in the `compressed` header field,
and later stored in the `compression-filter` field. There appears to
never have been any validation of the contents of this field on restore
other than whether the whole backup is properly authenticated.

Since the backup metadata is authenticated via an HMAC with the backup
passphrase, an attacker must be able to crack the backup passphrase in
order to subvert a users existing backup.

The internal structure of backups is one outer uncompressed
multi-session-concatinated (via `tar -A`) tar archive. The first
session contains an uncompressed and unauthenticated `backup-header`.
This untrusted backup-header file is initially only inspected to
determine the backup archive format to determine how to proceed with
further extraction. The following tar sessions contain a
`backup-header.hmac` file used to authenticate the backup header before
deeper inspection, and other files (qubes.xml, vmXX/{private,etc.}.img)
which are each wrapped in their own tar archives and then wrapped in
their own encryption/authentication.

Unfortunately, because qubes.xml is itself contained in an inner
potentially-compressed tar archive, this means the (potentially
malicious) decompression filter is still invoked even when the
`--verify-only` flag is passed to `qvm-backup-restore`, or equivelantly
when the "Verify backup integrity, do not restore the data" box is
checked in the Qubes backup restore GUI.

Patching
========

NOTE: patching is not sufficient to recover from a compromised state.
If you suspect you may have restored a malicious backup, see the
following section for details and recommendations.

The specific package that resolves the problems discussed in this
bulletin are as follows:

  For Qubes 4.0:
  - qubes-core-admin-client version 4.0.27 (TODO: verify version)

The packages are to be installed in dom0 via the Qubes VM Manager or via
the qubes-dom0-update command as follows:

  For updates from the stable repository (not immediately available):
  $ sudo qubes-dom0-update

  For updates from the security-testing repository:
  $ sudo qubes-dom0-update --enablerepo=qubes-dom0-security-testing

These packages will migrate from the security-testing repository to the
current (stable) repository over the next two weeks after being tested
by the community.

Recovery
========

In Qubes OS R3.2, we introduced the concept of "paranoid" backup restore
mode [1]. Unfortunately, this mode was only implemented in R3.2 and not
carried over to R4.x. The idea was that with a combination of changes
that were already being made for Qubes R4, the entire recovery process
would already be able to be done outside Dom0 in a depriveleged way via
the Qubes Admin/mgmt API [2]. However, this idea never fully manifested
in a usable way (until now - as part of addressing this advisory).

The safest way to restore from a backup is to do the actual backup
processing outside Dom0. In practice, this means:
1. Installing the `qubes-core-admin-client` package in a VM
2. Authorizing the appropriate qrexec policies there:
   - admin.vm.Create.AppVM
   - admin.vm.Create.TemplateVM
   - admin.vm.Create.StandaloneVM
   - include/admin-local-rwx
   - include/admin-global-ro
3. Use `qvm-backup-restore` in the VM.

The above procedure will be automated with an `qvm-backup-restore
--paranoid-mode` option, implemented in a subsequent update.

See the original article[1] for details how to use this mode to
recover the system.

Workaround / Indicator of Compromise
====================================

This does not solve the actual issue, and will not recover a compromised
machine, however, it is possible to manually inspect the headers of a
backup to observe whether the particular issue of this advisory has been
triggered.

To do so, inspect the backup as follows:

1. Verify the backup header integrity according to the "emergency
   backup restore without Qubes" instructions for your backup. These
   vary depending on the age of the backup, as the format has changed
   somewhat over time. Refer to [3][4][5][6].

2. Check the "compressed" and "compression-filter" header fields for
   anything anomalous.

This probably looks something like the following:

    $ tar -ivxf qubes-2019-08-06T121200 backup-header{,.hmac}
    backup-header
    backup-header.hmac
    $ scrypt dec backup-header.hmac backup-header.ok
    Please enter passphrase: backup-header!<backup-passphrase>
    $ cmp backup-header.ok backup-header \
    > && echo integrity ok || echo something is wrong
    integrity ok
    $ grep -E '^(compressed|compression-filter)=' backup-header
    compressed=True
    compression-filter=gzip

If you see anything other than `True` and `gzip`, this is potentially
suspicious.

It's worth noting, however, that depending on how a malicious backup
has been stored and/or transferred to the machine on which to restore
it, and depending on the sophistication of an attacker, a previously
malicious backup may have self-modified to appear benign after the fact
as part of its exploit payload - so this is not a reliable way to detect
malicious backups unless they are e.g. stored exclusively on immutable
media.

Also, the possibility of other similar vulnerabilities cannot be
completely ruled out, so restoring backups in a depriveleged manner
(outside Dom0, via the Admin API) is still recommended.

Credits
=======

This issue was discovered and reported by Jean-Philippe Ouellet
<jpo@vt.edu>, who also provided a fix, a PoC exploit, helped with
mitigations for this general class of issue in the future, and wrote
the initial draft of this advisory.

References
==========

[1] https://www.qubes-os.org/news/2017/04/26/qubes-compromise-recovery/
[2] https://github.com/QubesOS/qubes-issues/issues/2737#issuecomment-316565022
[3] https://www.qubes-os.org/doc/backup-restore/
[4] https://www.qubes-os.org/doc/backup-emergency-restore-v4/
[5] https://www.qubes-os.org/doc/backup-emergency-restore-v3/
[6] https://www.qubes-os.org/doc/backup-emergency-restore-v2/
[7] https://github.com/QubesOS/qubes-core-admin/commit/0cd8281ac10ee06f4b2fce9f86e27eb25292bc25

--
The Qubes Security Team
https://www.qubes-os.org/security/
